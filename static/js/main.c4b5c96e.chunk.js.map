{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","onAdd","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","query","setQuery","_useState5","_useState6","isLoding","setIsLoading","_useState7","_useState8","isError","setIsError","handleQueryChange","useCallback","event","target","value","_Fragment","onSubmit","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","trim","response","Title","Plot","Poster","imdbID","finally","htmlFor","type","id","placeholder","classNames","onChange","disabled","onClick","App","setMovies","every","item","currentMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4b5c96e.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useCallback, useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [query, setQuery] = useState('');\n  const [isLoding, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleQueryChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n      setIsError(false);\n    }, [],\n  );\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(query.trim())\n      .then(response => {\n        if ('Error' in response) {\n          setIsError(true);\n        } else {\n          setMovie({\n            title: response.Title,\n            description: response.Plot,\n            imgUrl: response.Poster === 'N/A'\n              ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n              : response.Poster,\n            imdbUrl: `https://www.imdb.com/title/${response.imdbID}`,\n            imdbId: response.imdbID,\n          });\n        }\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  const handleAdd = () => {\n    if (movie) {\n      onAdd(movie);\n      setMovie(null);\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': isError })}\n              value={query}\n              onChange={handleQueryChange}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoding,\n              })}\n              disabled={!query}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=899bf713';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onAdd = (movie: Movie) => {\n    const isUniqueMovie = movies.every(item => item.imdbId !== movie.imdbId);\n\n    if (isUniqueMovie) {\n      setMovies((currentMovies) => ([...currentMovies, movie]));\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}